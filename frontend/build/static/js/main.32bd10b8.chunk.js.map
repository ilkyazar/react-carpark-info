{"version":3,"sources":["App.js","index.js"],"names":["App","state","data","district","ParkID","fetch","method","headers","response","json","body","this","setState","districtList","i","push","Ilce","Set","uniqueDistrictOptions","j","key","value","carParkList","ParkAdi","capacity","Number","BosKapasite","freeCapacity","Kapasitesi","lat","Latitude","lon","Longitude","CarParkLocation","withScriptjs","withGoogleMap","props","defaultZoom","defaultCenter","lng","showMarker","position","className","onChange","e","target","createDistrictOptions","createCarParkOptions","getFreeParkingSpaces","getUsedParkingSpaces","getLongitude","getLatitude","googleMapURL","loadingElement","style","height","containerElement","mapElement","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.32bd10b8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker } from \"react-google-maps\"\n\nclass App extends Component {\n  state = {\n    data: '',\n    district: '',\n    ParkID: 0\n  };\n\n  async componentDidMount() {\n    const response = await fetch('/api/data', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      }\n    });\n\n    const body = await response.json();\n\n    this.setState({ data: body });\n  }\n\n  createDistrictOptions() {\n    let districtList = [];\n\n    for (var i in this.state.data) {\n      districtList.push(this.state.data[i].Ilce);\n    }\n\n    districtList = [...new Set(districtList)];\n\n    let uniqueDistrictOptions = [];\n\n    for (var j in districtList) {\n      uniqueDistrictOptions.push(<option key={j} value={districtList[j]}>{districtList[j]}</option>)\n    }\n\n    return uniqueDistrictOptions;\n  }\n\n  createCarParkOptions() {\n    let carParkList = [];\n\n    for (var i in this.state.data) {\n      if (this.state.data[i].Ilce === this.state.district)\n        carParkList.push(<option key={i} value={this.state.data[i].ParkID}>{this.state.data[i].ParkAdi}</option>)\n    }\n\n    return carParkList;\n  }\n\n  getFreeParkingSpaces() {\n    let capacity = 0;\n\n    for (var i in this.state.data) {\n      if (Number(this.state.data[i].ParkID) === Number(this.state.ParkID)) {\n        capacity = this.state.data[i].BosKapasite;\n      }\n    }\n\n    return capacity;\n  }\n\n  getUsedParkingSpaces() {\n    let capacity = 0;\n    let freeCapacity = 0;\n\n    for (var i in this.state.data) {\n\n      if (Number(this.state.data[i].ParkID) === Number(this.state.ParkID)) {\n        freeCapacity = this.state.data[i].BosKapasite;\n        capacity = this.state.data[i].Kapasitesi;\n      }\n    }\n\n    return capacity - freeCapacity;\n  }\n\n  getLatitude() {\n    let lat = 40.96;\n\n    for (var i in this.state.data) {\n\n      if (Number(this.state.data[i].ParkID) === Number(this.state.ParkID)) {\n        lat = this.state.data[i].Latitude;\n      }\n    }\n\n    return lat;\n  }\n\n  getLongitude() {\n    let lon = 29.10;\n\n    for (var i in this.state.data) {\n\n      if (Number(this.state.data[i].ParkID) === Number(this.state.ParkID)) {\n        lon = this.state.data[i].Longitude;\n      }\n    }\n\n    return lon;\n\n  }\n\n  render() {\n    const CarParkLocation = withScriptjs(withGoogleMap((props) =>\n      <GoogleMap\n        defaultZoom={ 15 }\n        defaultCenter={{ lat: props.lat, lng: props.lon }}\n      >\n        { props.showMarker && \n          <Marker position={{ lat: props.lat, lng: props.lon }} />\n        }\n      </GoogleMap>\n    ))\n\n    const DistrictSelectionForm = () =>\n        <form>\n            <p>\n              <strong>Districts of Car Parks:</strong>\n            </p>\n            <select\n              value={this.state.district}\n              onChange={e => this.setState({ district: e.target.value })}>\n                  <option value=\"\">Select a district</option>\n                  {this.createDistrictOptions()}\n            </select>\n            \n        </form>\n\n    const CarParkSelectionForm = () => \n        <form>\n            <p>\n              <strong>Car Parks:</strong>\n            </p>\n            <select\n              value={this.state.ParkID}\n              onChange={e => this.setState({ ParkID: e.target.value })}>\n                  {!this.state.district && <option value=\"\">Please select a district first</option>}\n                  {this.state.district && <option value=\"\">Select a car park</option>}\n                  {this.createCarParkOptions()}\n            </select>\n            \n        </form>\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          Ispark Car Parks\n        </header>\n\n        <DistrictSelectionForm/>\n\n        <CarParkSelectionForm/>\n\n        <p>\n          <strong>Free Parking Spaces:</strong>\n        </p>\n\n        {this.getFreeParkingSpaces()} ({this.getUsedParkingSpaces()} used)\n\n        <p>\n          <strong>Location of the Car Park:</strong>\n        </p>\n\n        <CarParkLocation\n          showMarker=\"true\"\n          lon={Number(this.getLongitude())}\n          lat={Number(this.getLatitude())}\n          googleMapURL=\"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places\"\n          loadingElement={<div style={{ height: '100%' }} />}\n          containerElement={<div style={{ height: '500px' }} />}\n          mapElement={<div style={{ height: '100%' }} />}\n        />\n      \n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}